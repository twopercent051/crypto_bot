from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext

from tgbot.misc.states import *
from tgbot.keyboards import reply
from tgbot.keyboards.inline import *
from tgbot.config import load_config
from tgbot.models.db_connector import *
from create_bot import bot



config = load_config(".env")
admin_group_id = config.misc.admin_group


def mute(message: Message):
    pass


async def user_start(message: Message):
    text = [
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –¢—É—Ç –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å <b>–∂–∏—Ä–Ω—ã–º</b>,',
        '<i>–∫—É—Ä—Å–∏–≤–æ–º</i>, <u>–ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–º</u>, <b><i>–∞ —Ç–∞–∫–∂–µ –ª—é–±—ã–º–∏</i></b> <u><i>–∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏</i></u>. –ï—â—ë –º–æ–∂–Ω–æ',
        '–¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ üá¨üáß.',
        '\n',
        '–ê —Ç–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–Ω–æ–ø–∫—É!'
    ]
    user_id = message.from_user.id
    user_nickname = message.from_user.username
    is_us = await is_user(user_id)
    if is_us == False:
        await create_user(user_id, user_nickname)
        await FSMOffer.home.set()
    await message.answer(''.join(text), reply_markup=main_user_keyboard)


async def user_home(callback: CallbackQuery):
    text = '–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø'
    await callback.message.delete()
    await bot.answer_callback_query(callback.id)
    await FSMOffer.home.set()
    await callback.message.answer(text, reply_markup=main_user_keyboard)


async def show_courses(callback: CallbackQuery):
    text = ['–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:']
    courses = await get_all_courses()
    for cours in courses:
        row = f'<b>{cours[1]}</b>. –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {float(cours[2])} ‚ÇΩ, –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {float(cours[3])} ‚ÇΩ'
        text.append(row)
    await callback.message.delete()
    await bot.answer_callback_query(callback.id)
    await callback.message.answer('\n'.join(text), reply_markup=home_keyboard)


async def buy_cripto(callback: CallbackQuery, state: FSMContext):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å'
    async with state.proxy() as data:
        data['operation'] = 'buy'
    await callback.message.delete()
    await bot.answer_callback_query(callback.id)
    await callback.message.answer(text, reply_markup=coin_keyboard)


async def sell_cripto(callback: CallbackQuery, state: FSMContext):
    text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å'
    async with state.proxy() as data:
        data['operation'] = 'sell'
    await callback.message.delete()
    await bot.answer_callback_query(callback.id)
    await callback.message.answer(text, reply_markup=coin_keyboard)


async def operation_info(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        operation = data.as_dict()['operation']
    coin = callback.data.upper().split(':')[1]
    if operation == 'buy':
        op_id = 2
        op_text = '–ø—Ä–æ–¥–∞—ë–º'
    elif operation == 'sell':
        op_id = 3
        op_text = '–ø–æ–∫—É–ø–∞–µ–º'
    price_cor = await get_course(coin)
    price = price_cor[op_id]
    async with state.proxy() as data:
        data['price'] = price
        data['coin'] = coin
    text = [
        f'–ú—ã {op_text} <b>{coin}</b> –ø–æ —Ü–µ–Ω–µ {price} ‚ÇΩ',
        f'–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>{coin}</b>, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å.',
        '–í–≤–æ–¥–∏—Ç—å –º–æ–∂–Ω–æ –∫–∞–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Ç–∞–∫ –∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É.',
        '–ú—ã –º–µ–Ω—è–µ–º –Ω–∞ —Å—É–º–º—É, –Ω–µ –±–æ–ª—å—à—É—é —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞ $1000'
    ]
    await callback.message.delete()
    await FSMOffer.operation.set()
    await bot.answer_callback_query(callback.id)
    await callback.message.answer(' '.join(text))


async def operation_finish(message: Message, state: FSMContext):
    try:
        quantity = float(message.text.replace(',', '.'))
        async with state.proxy() as data:
            operation = data.as_dict()['operation']
            coin = data.as_dict()['coin']
            price = data.as_dict()['price']
        total = float(quantity) * float(price)
        if operation == 'buy':
            op_text = '–ø–æ–∫—É–ø–∞–µ—Ç–µ'
        elif operation == 'sell':
            op_text = '–ø—Ä–æ–¥–∞—ë—Ç–µ'
        text = [
            f'–í—ã {op_text} <b>{quantity} {coin}</b> –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É <b>{total} ‚ÇΩ</b>',
            '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É, –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫'
        ]
        async with state.proxy() as data:
            data['user_id'] = message.from_user.id
            data['quantity'] = quantity
            data['total'] = total
        del_masg = message.message_id - 1
        await bot.delete_message(chat_id=message.chat.id, message_id=del_masg)
        await message.delete()
        await message.answer(' '.join(text), reply_markup=accept_keyboard)
    except:
        text = '–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –≤–≤–æ–¥'
        await message.delete()
        await message.answer(text, reply_markup=home_keyboard)

async def operation_accept(callback: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        operation = data.as_dict()['operation']
        coin = data.as_dict()['coin']
        price = data.as_dict()['price']
        user_id = data.as_dict()['user_id']
        total = data.as_dict()['total']
        quantity = data.as_dict()['quantity']
    if operation == 'buy':
        op_text = '–ø–æ–∫—É–ø–∫—É'
    else:
        op_text = '–ø—Ä–æ–¥–∞–∂—É'
    user_text = '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –í–∞–º –Ω–∞–ø–∏—à–µ—Ç –Ω–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤'
    admin_text = [
        '‚ö†Ô∏è‚ö†Ô∏è –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê ‚ö†Ô∏è‚ö†Ô∏è',
        f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ {op_text}',
        f'<b>–í–∞–ª—é—Ç–∞:</b> {coin}',
        f'<b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ',
        f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}',
        f'<b>–°—É–º–º–∞:</b> {total} ‚ÇΩ'
    ]
    keyboard = connect_user_kb(user_id)
    await create_offer(state)
    await callback.message.delete()
    await bot.answer_callback_query(callback.id)
    await callback.message.answer(user_text, reply_markup=home_keyboard)
    await bot.send_message(chat_id=admin_group_id, text='\n'.join(admin_text), reply_markup=keyboard)

async def connect_admin(callback: CallbackQuery):
    text = '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞'
    await FSMConnect.connect.set()
    await callback.message.answer(text, reply_markup=home_keyboard)
    await bot.answer_callback_query(callback.id)


async def answer_admin(message: Message, state: FSMContext):
    text_admin = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    text_user = [
        'Ô∏è‚ö† –°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: Ô∏è‚ö†',
        f'<i>{message.text}</i>'
    ]
    user_id = message.from_user.id
    # async with state.proxy() as data:
    #     user_id = data.as_dict()['user_id']
    user_kb = connect_user_kb(user_id)
    await bot.send_message(chat_id=admin_group_id, text='\n'.join(text_user), reply_markup=user_kb)
    await message.answer(text_admin, reply_markup=home_keyboard)


async def connect_support(callback: CallbackQuery):
    text = '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞'
    await FSMConnect.connect.set()
    await callback.message.answer(text, reply_markup=home_keyboard)
    await bot.answer_callback_query(callback.id)



def register_user(dp: Dispatcher):
    dp.register_message_handler(mute, chat_id=admin_group_id)
    dp.register_message_handler(user_start, commands=["start"], state='*')
    dp.register_message_handler(operation_finish, content_types='text', state=FSMOffer.operation)
    dp.register_message_handler(answer_admin, content_types='text', state=FSMConnect.connect)

    dp.register_callback_query_handler(user_home, lambda x: x.data == 'home', state='*')
    dp.register_callback_query_handler(user_home, lambda x: x.data == 'cancel', state='*')
    dp.register_callback_query_handler(show_courses, lambda x: x.data == 'course_info', state='*')
    dp.register_callback_query_handler(buy_cripto, lambda x: x.data == 'buy_crypto', state='*')
    dp.register_callback_query_handler(sell_cripto, lambda x: x.data == 'sell_crypto', state='*')
    dp.register_callback_query_handler(operation_info, lambda x: x.data.split(':')[0] == 'coin', state='*')
    dp.register_callback_query_handler(connect_admin, lambda x: x.data.split(':')[0] == 'connect', state='*')
    dp.register_callback_query_handler(operation_accept, lambda x: x.data == 'accept', state='*')
    dp.register_callback_query_handler(connect_support, lambda x: x.data == 'support', state='*')



